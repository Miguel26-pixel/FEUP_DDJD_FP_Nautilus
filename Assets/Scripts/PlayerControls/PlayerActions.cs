//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/PlayerControls/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""HUD"",
            ""id"": ""027dddd2-08a3-4133-b275-c1862cbaaf7d"",
            ""actions"": [
                {
                    ""name"": ""Craft"",
                    ""type"": ""Button"",
                    ""id"": ""dd04eafd-db24-4f8f-b4a1-e3c06de7a457"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""f534e349-7f96-4c64-a7e3-91ee3f7c6ef2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate Clockwise"",
                    ""type"": ""Button"",
                    ""id"": ""b0bf948b-e10b-4953-897e-3877e9773bcf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate Anti Clockwise"",
                    ""type"": ""Button"",
                    ""id"": ""907361e7-127a-4f05-b0cd-20383341fca3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e43aefbe-b885-4495-920d-02000b02bcfe"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Test"",
                    ""action"": ""Craft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87a58f67-0f0b-482d-8b05-367239d9425c"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc4c9a31-b5d3-4cd9-930e-74f24f2c1588"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate Clockwise"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1f304852-4e81-4619-9ddb-35c21b7332fd"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate Anti Clockwise"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Movement"",
            ""id"": ""dc41f67c-7e7e-4f06-9326-7ffbf0d18910"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""ff847ff7-ee18-4e4d-aa74-8b791cafa8cd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""a66e85d2-cbc7-4c51-811b-062825762ee4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""da4a8653-afb0-4705-acd0-f1e566d92930"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""b8fa4cba-17b0-453a-b86e-ab1f7a2cd654"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f9d32f60-86db-4990-8342-a95980e32a2d"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""1af1726c-3a0a-4ec9-a024-5b0e740fc608"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""83ece3ee-7788-4435-8041-529fcce9d754"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""663c1532-befb-4de6-bbe7-2aee16933b82"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""dd15b067-e97f-45c5-8a21-16403972f2f5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8c3bcb29-76c8-46cd-bd3a-492e57b6f048"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""01290883-3792-4619-bc9b-b2fb6bb1094f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f864fd8-075b-46f6-8a50-c573cf6f2e03"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bf997ece-9b18-4541-b0f9-fdcd086947b0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Tool"",
            ""id"": ""5ee0ce1e-9e3b-4a42-9024-28cf7a73e077"",
            ""actions"": [
                {
                    ""name"": ""Equip Tool"",
                    ""type"": ""Button"",
                    ""id"": ""1f1de201-4a85-4b2a-9298-4916201eb2d3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Use Right Tool"",
                    ""type"": ""Button"",
                    ""id"": ""4f188089-938f-42db-a220-46cf13e5373b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Use Tool"",
                    ""type"": ""Button"",
                    ""id"": ""73c79390-0a99-4ed8-b8fb-537b31463c87"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6849c435-cc7f-49be-9b6f-f4264738f02f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use Tool"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""626e75dd-5d83-4071-a6e0-87c614a9a9b0"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use Right Tool"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9f0a1b84-e29c-441d-bfac-8fc9044b744d"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Equip Tool"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Test"",
            ""bindingGroup"": ""Test"",
            ""devices"": []
        }
    ]
}");
        // HUD
        m_HUD = asset.FindActionMap("HUD", throwIfNotFound: true);
        m_HUD_Craft = m_HUD.FindAction("Craft", throwIfNotFound: true);
        m_HUD_Inventory = m_HUD.FindAction("Inventory", throwIfNotFound: true);
        m_HUD_RotateClockwise = m_HUD.FindAction("Rotate Clockwise", throwIfNotFound: true);
        m_HUD_RotateAntiClockwise = m_HUD.FindAction("Rotate Anti Clockwise", throwIfNotFound: true);
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Attack = m_Movement.FindAction("Attack", throwIfNotFound: true);
        m_Movement_Run = m_Movement.FindAction("Run", throwIfNotFound: true);
        m_Movement_Jump = m_Movement.FindAction("Jump", throwIfNotFound: true);
        m_Movement_Move = m_Movement.FindAction("Move", throwIfNotFound: true);
        // Tool
        m_Tool = asset.FindActionMap("Tool", throwIfNotFound: true);
        m_Tool_EquipTool = m_Tool.FindAction("Equip Tool", throwIfNotFound: true);
        m_Tool_UseRightTool = m_Tool.FindAction("Use Right Tool", throwIfNotFound: true);
        m_Tool_UseTool = m_Tool.FindAction("Use Tool", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // HUD
    private readonly InputActionMap m_HUD;
    private IHUDActions m_HUDActionsCallbackInterface;
    private readonly InputAction m_HUD_Craft;
    private readonly InputAction m_HUD_Inventory;
    private readonly InputAction m_HUD_RotateClockwise;
    private readonly InputAction m_HUD_RotateAntiClockwise;
    public struct HUDActions
    {
        private @PlayerActions m_Wrapper;
        public HUDActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Craft => m_Wrapper.m_HUD_Craft;
        public InputAction @Inventory => m_Wrapper.m_HUD_Inventory;
        public InputAction @RotateClockwise => m_Wrapper.m_HUD_RotateClockwise;
        public InputAction @RotateAntiClockwise => m_Wrapper.m_HUD_RotateAntiClockwise;
        public InputActionMap Get() { return m_Wrapper.m_HUD; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HUDActions set) { return set.Get(); }
        public void SetCallbacks(IHUDActions instance)
        {
            if (m_Wrapper.m_HUDActionsCallbackInterface != null)
            {
                @Craft.started -= m_Wrapper.m_HUDActionsCallbackInterface.OnCraft;
                @Craft.performed -= m_Wrapper.m_HUDActionsCallbackInterface.OnCraft;
                @Craft.canceled -= m_Wrapper.m_HUDActionsCallbackInterface.OnCraft;
                @Inventory.started -= m_Wrapper.m_HUDActionsCallbackInterface.OnInventory;
                @Inventory.performed -= m_Wrapper.m_HUDActionsCallbackInterface.OnInventory;
                @Inventory.canceled -= m_Wrapper.m_HUDActionsCallbackInterface.OnInventory;
                @RotateClockwise.started -= m_Wrapper.m_HUDActionsCallbackInterface.OnRotateClockwise;
                @RotateClockwise.performed -= m_Wrapper.m_HUDActionsCallbackInterface.OnRotateClockwise;
                @RotateClockwise.canceled -= m_Wrapper.m_HUDActionsCallbackInterface.OnRotateClockwise;
                @RotateAntiClockwise.started -= m_Wrapper.m_HUDActionsCallbackInterface.OnRotateAntiClockwise;
                @RotateAntiClockwise.performed -= m_Wrapper.m_HUDActionsCallbackInterface.OnRotateAntiClockwise;
                @RotateAntiClockwise.canceled -= m_Wrapper.m_HUDActionsCallbackInterface.OnRotateAntiClockwise;
            }
            m_Wrapper.m_HUDActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Craft.started += instance.OnCraft;
                @Craft.performed += instance.OnCraft;
                @Craft.canceled += instance.OnCraft;
                @Inventory.started += instance.OnInventory;
                @Inventory.performed += instance.OnInventory;
                @Inventory.canceled += instance.OnInventory;
                @RotateClockwise.started += instance.OnRotateClockwise;
                @RotateClockwise.performed += instance.OnRotateClockwise;
                @RotateClockwise.canceled += instance.OnRotateClockwise;
                @RotateAntiClockwise.started += instance.OnRotateAntiClockwise;
                @RotateAntiClockwise.performed += instance.OnRotateAntiClockwise;
                @RotateAntiClockwise.canceled += instance.OnRotateAntiClockwise;
            }
        }
    }
    public HUDActions @HUD => new HUDActions(this);

    // Movement
    private readonly InputActionMap m_Movement;
    private IMovementActions m_MovementActionsCallbackInterface;
    private readonly InputAction m_Movement_Attack;
    private readonly InputAction m_Movement_Run;
    private readonly InputAction m_Movement_Jump;
    private readonly InputAction m_Movement_Move;
    public struct MovementActions
    {
        private @PlayerActions m_Wrapper;
        public MovementActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attack => m_Wrapper.m_Movement_Attack;
        public InputAction @Run => m_Wrapper.m_Movement_Run;
        public InputAction @Jump => m_Wrapper.m_Movement_Jump;
        public InputAction @Move => m_Wrapper.m_Movement_Move;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
            {
                @Attack.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnAttack;
                @Run.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnRun;
                @Run.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnRun;
                @Run.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnRun;
                @Jump.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                @Move.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_MovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Tool
    private readonly InputActionMap m_Tool;
    private IToolActions m_ToolActionsCallbackInterface;
    private readonly InputAction m_Tool_EquipTool;
    private readonly InputAction m_Tool_UseRightTool;
    private readonly InputAction m_Tool_UseTool;
    public struct ToolActions
    {
        private @PlayerActions m_Wrapper;
        public ToolActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @EquipTool => m_Wrapper.m_Tool_EquipTool;
        public InputAction @UseRightTool => m_Wrapper.m_Tool_UseRightTool;
        public InputAction @UseTool => m_Wrapper.m_Tool_UseTool;
        public InputActionMap Get() { return m_Wrapper.m_Tool; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ToolActions set) { return set.Get(); }
        public void SetCallbacks(IToolActions instance)
        {
            if (m_Wrapper.m_ToolActionsCallbackInterface != null)
            {
                @EquipTool.started -= m_Wrapper.m_ToolActionsCallbackInterface.OnEquipTool;
                @EquipTool.performed -= m_Wrapper.m_ToolActionsCallbackInterface.OnEquipTool;
                @EquipTool.canceled -= m_Wrapper.m_ToolActionsCallbackInterface.OnEquipTool;
                @UseRightTool.started -= m_Wrapper.m_ToolActionsCallbackInterface.OnUseRightTool;
                @UseRightTool.performed -= m_Wrapper.m_ToolActionsCallbackInterface.OnUseRightTool;
                @UseRightTool.canceled -= m_Wrapper.m_ToolActionsCallbackInterface.OnUseRightTool;
                @UseTool.started -= m_Wrapper.m_ToolActionsCallbackInterface.OnUseTool;
                @UseTool.performed -= m_Wrapper.m_ToolActionsCallbackInterface.OnUseTool;
                @UseTool.canceled -= m_Wrapper.m_ToolActionsCallbackInterface.OnUseTool;
            }
            m_Wrapper.m_ToolActionsCallbackInterface = instance;
            if (instance != null)
            {
                @EquipTool.started += instance.OnEquipTool;
                @EquipTool.performed += instance.OnEquipTool;
                @EquipTool.canceled += instance.OnEquipTool;
                @UseRightTool.started += instance.OnUseRightTool;
                @UseRightTool.performed += instance.OnUseRightTool;
                @UseRightTool.canceled += instance.OnUseRightTool;
                @UseTool.started += instance.OnUseTool;
                @UseTool.performed += instance.OnUseTool;
                @UseTool.canceled += instance.OnUseTool;
            }
        }
    }
    public ToolActions @Tool => new ToolActions(this);
    private int m_TestSchemeIndex = -1;
    public InputControlScheme TestScheme
    {
        get
        {
            if (m_TestSchemeIndex == -1) m_TestSchemeIndex = asset.FindControlSchemeIndex("Test");
            return asset.controlSchemes[m_TestSchemeIndex];
        }
    }
    public interface IHUDActions
    {
        void OnCraft(InputAction.CallbackContext context);
        void OnInventory(InputAction.CallbackContext context);
        void OnRotateClockwise(InputAction.CallbackContext context);
        void OnRotateAntiClockwise(InputAction.CallbackContext context);
    }
    public interface IMovementActions
    {
        void OnAttack(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IToolActions
    {
        void OnEquipTool(InputAction.CallbackContext context);
        void OnUseRightTool(InputAction.CallbackContext context);
        void OnUseTool(InputAction.CallbackContext context);
    }
}
