//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Player/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""CraftingTest"",
            ""id"": ""027dddd2-08a3-4133-b275-c1862cbaaf7d"",
            ""actions"": [
                {
                    ""name"": ""Craft"",
                    ""type"": ""Button"",
                    ""id"": ""dd04eafd-db24-4f8f-b4a1-e3c06de7a457"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e43aefbe-b885-4495-920d-02000b02bcfe"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Test"",
                    ""action"": ""Craft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Test"",
            ""bindingGroup"": ""Test"",
            ""devices"": []
        }
    ]
}");
        // CraftingTest
        m_CraftingTest = asset.FindActionMap("CraftingTest", throwIfNotFound: true);
        m_CraftingTest_Craft = m_CraftingTest.FindAction("Craft", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CraftingTest
    private readonly InputActionMap m_CraftingTest;
    private ICraftingTestActions m_CraftingTestActionsCallbackInterface;
    private readonly InputAction m_CraftingTest_Craft;
    public struct CraftingTestActions
    {
        private @PlayerActions m_Wrapper;
        public CraftingTestActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Craft => m_Wrapper.m_CraftingTest_Craft;
        public InputActionMap Get() { return m_Wrapper.m_CraftingTest; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CraftingTestActions set) { return set.Get(); }
        public void SetCallbacks(ICraftingTestActions instance)
        {
            if (m_Wrapper.m_CraftingTestActionsCallbackInterface != null)
            {
                @Craft.started -= m_Wrapper.m_CraftingTestActionsCallbackInterface.OnCraft;
                @Craft.performed -= m_Wrapper.m_CraftingTestActionsCallbackInterface.OnCraft;
                @Craft.canceled -= m_Wrapper.m_CraftingTestActionsCallbackInterface.OnCraft;
            }
            m_Wrapper.m_CraftingTestActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Craft.started += instance.OnCraft;
                @Craft.performed += instance.OnCraft;
                @Craft.canceled += instance.OnCraft;
            }
        }
    }
    public CraftingTestActions @CraftingTest => new CraftingTestActions(this);
    private int m_TestSchemeIndex = -1;
    public InputControlScheme TestScheme
    {
        get
        {
            if (m_TestSchemeIndex == -1) m_TestSchemeIndex = asset.FindControlSchemeIndex("Test");
            return asset.controlSchemes[m_TestSchemeIndex];
        }
    }
    public interface ICraftingTestActions
    {
        void OnCraft(InputAction.CallbackContext context);
    }
}
