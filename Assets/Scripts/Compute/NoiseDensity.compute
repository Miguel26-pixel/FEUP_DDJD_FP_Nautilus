#pragma kernel Density
#include "/Includes/Density.compute"
#include "/Includes/Noise.compute"

// Noise settings
StructuredBuffer<float3> offsets;
int octaves;
float lacunarity;
float persistence;
float noiseScale;
float noiseWeight;
float floorOffset;
float weightMultiplier;
bool closeEdges;
float hardFloor;
float hardFloorWeight;
float warpEffect;
float warpFrequency;

float4 params;

[numthreads(numThreads,numThreads,numThreads)]
void Density (int3 id : SV_DispatchThreadID)
{
    // if (id.x >= numPointsPerAxis || id.y >= numPointsPerAxis || id.z >= numPointsPerAxis) {
    //     return;
    // }

    float3 pos = centre + id * spacing - boundsSize/2;

    float noise = 0;

    float frequency = noiseScale/100;
    float amplitude = 1;
    float weight = 1;
    
    float warpX = snoise(pos * warpFrequency);
    float warpY = snoise(pos * warpFrequency + 0.5);
    float warpZ = snoise(pos * warpFrequency + 1);
    pos += float3(warpX, warpY, warpZ) * warpEffect;

    // pos += float3(warpX, warpY, warpZ) * lerp(0, 14, float(id.x) / float(numPointsPerAxis) );

    for (int j =0; j < octaves; j ++) {
        float n = snoise(pos * frequency + offsets[j] + offset);
        float v = 1-abs(n);
        v = v*v;
        v *= weight;
        weight = saturate(v*weightMultiplier);
        noise += v * amplitude;
        amplitude *= persistence;
        frequency *= lacunarity;
    }
    
    float finalVal = -(pos.y + floorOffset) + noise * noiseWeight + (pos.y%params.x) * params.y;
    finalVal += hardFloorWeight * (pos.y < hardFloor);

    // if (closeEdges) {
    //     float3 edgeOffset = abs(pos*2)-worldSize + spacing/2;
    //     float edgeWeight = saturate(sign(max(max(edgeOffset.x,edgeOffset.y),edgeOffset.z)));
    //     finalVal = finalVal * (1-edgeWeight) - 100 * edgeWeight;
    //     
    // }

    int index = indexFromCoord(id.x,id.y,id.z);
    points[index] = float4(pos, finalVal);
}
